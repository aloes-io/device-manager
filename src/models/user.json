{
  "name": "user",
  "plural": "users",
  "base": "User",
  "ownerRelations": true,
  "idInjection": true,
  "options": {
    "validateUpsert": true
  },
  "mixins": {},
  "restrictResetPasswordTokenScope": true,
  "emailVerificationRequired": true,
  "properties": {
    "type": {
      "type": "string",
      "required": false
    },
    "firstName": {
      "type": "string",
      "required": false
    },
    "lastName": {
      "type": "string",
      "required": false
    },
    "fullName": {
      "type": "string"
    },
    "fullAddress": {
      "type": "string"
    },
    "avatarImgUrl": {
      "type": "string"
    },
    "headerImgUrl": {
      "type": "string"
    },
    "status": {
      "type": "boolean"
    },
    "subscribed": {
      "type": "string",
      "default": "new"
    },
    "currentSubscribedEnd": {
      "type": "string",
      "required": false
    },
    "deleted": {
      "type": "boolean",
      "default": false
    }
  },
  "hidden": ["deleted, emailVerified"],
  "validations": [],
  "relations": {
    "accessTokens": {
      "type": "hasMany",
      "model": "accessToken",
      "foreignKey": "userId",
      "options": {
        "disableInclude": false
      }
    },
    "address": {
      "type": "hasOne",
      "model": "Address",
      "polymorphic": {
        "selector": "owner"
      },
      "options": {
        "nestRemoting": true
      }
    },
    "applications": {
      "type": "hasMany",
      "model": "Application",
      "foreignKey": "ownerId"
    },
    "credentials": {
      "type": "hasMany",
      "model": "userCredential",
      "foreignKey": "userId"
    },
    "devices": {
      "type": "hasMany",
      "model": "Device",
      "foreignKey": "ownerId"
    },
    "files": {
      "type": "hasMany",
      "model": "files",
      "foreignKey": "ownerId"
    },
    "identities": {
      "type": "hasMany",
      "model": "userIdentity",
      "foreignKey": "userId"
    },
    "roleMapping": {
      "type": "hasMany",
      "model": "RoleMapping",
      "foreignKey": "principalId"
    },
    "role": {
      "type": "hasMany",
      "model": "Role",
      "foreignKey": "principalId",
      "through": "RoleMapping"
    },
    "teams": {
      "type": "hasMany",
      "model": "Team",
      "foreignKey": "ownerId"
    }
  },
  "acls": [
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "admin",
      "permission": "ALLOW"
    },
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "DENY"
    },
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "$owner",
      "permission": "ALLOW",
      "property": [
        "replaceById",
        "replaceOrCreate",
        "updateById",
        "updateAttributes",
        "upsert",
        "exists",
        "find",
        "findById",
        "setNewPassword",
        "__create__address",
        "__get__address",
        "__update__address",
        "__destroy__address",
        "__get__devices",
        "__create__devices",
        "__findById__devices",
        "__updateById__devices",
        "__destroyById__devices",
        "__get__sensors",
        "__findById__sensors",
        "__updateById__sensors",
        "__destroyById__sensors",
        "__get__applications",
        "__create__applications",
        "__findById__applications",
        "__updateById__applications",
        "__destroyById__applications",
        "__create__teams",
        "__findById__teams",
        "__updateById__teams"
      ]
    },
    {
      "accessType": "EXECUTE",
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "ALLOW",
      "property": [
        "create",
        "verifyEmail",
        "findByEmail",
        "verifyCaptcha",
        "sendContactForm",
        "resetPassword",
        "updatePasswordFromToken"
      ]
    },
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": [
        "findById",
        "find",
        "verifyAddress",
        "setNewPassword",
        "sendInvite",
        "__create__address",
        "__get__address",
        "__get__devices",
        "__create__devices",
        "__findById__devices",
        "__get__sensors",
        "__findById__sensors",
        "__get__applications",
        "__create__applications",
        "__findById__applications",
        "__get__teams"
      ]
    }
  ],
  "methods": {
    "verifyEmail": {
      "description": [" Request verify user email "],
      "accepts": [
        {
          "arg": "user",
          "type": "object",
          "required": true
        }
      ],
      "returns": {
        "arg": "result",
        "type": "object"
      },
      "http": {
        "verb": "post",
        "path": "/verify-email"
      }
    },
    "findByEmail": {
      "description": [" Request verify user email "],
      "accepts": [
        {
          "arg": "email",
          "type": "string",
          "required": true
        }
      ],
      "returns": {
        "arg": "result",
        "type": "object"
      },
      "http": {
        "verb": "post",
        "path": "/find-by-email"
      }
    },
    "verifyCaptcha": {
      "description": ["Verify captcha response ( coinhive ) "],
      "accepts": [
        {
          "arg": "hashes",
          "type": "string",
          "required": true
        },
        {
          "arg": "token",
          "type": "string",
          "required": true
        }
      ],
      "returns": {
        "arg": "result",
        "type": "object"
      },
      "http": {
        "verb": "post",
        "path": "/verify-captcha"
      }
    },
    "resetPassword": {
      "description": ["Reset password for a user with email."],
      "accepts": [
        {
          "arg": "options",
          "type": "object",
          "required": true,
          "http": {
            "source": "body"
          }
        }
      ],
      "returns": {
        "arg": "success",
        "type": "boolean"
      },
      "http": {
        "verb": "post",
        "path": "/reset-password-request"
      }
    },
    "updatePasswordFromToken": {
      "description": ["update password from a temporary token "],
      "accepts": [
        {
          "arg": "accessToken",
          "type": "object",
          "required": true
        },
        {
          "arg": "newPassword",
          "type": "string",
          "required": true
        }
      ],
      "returns": { "type": "boolean", "arg": "passwordChanged" },
      "http": { "path": "/update-password-from-token", "verb": "post" }
    },
    "setNewPassword": {
      "description": ["set new password for user"],
      "accepts": [
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        },
        {
          "arg": "oldPassword",
          "type": "string",
          "required": true
        },
        {
          "arg": "newPassword",
          "type": "string",
          "required": true
        }
      ],
      "returns": {
        "arg": "user",
        "type": "object"
      },
      "http": {
        "verb": "post",
        "path": "/set-new-password"
      }
    },
    "sendContactForm": {
      "description": ["send an email via contact form"],
      "accepts": [
        {
          "arg": "form",
          "type": "object",
          "required": true
        }
      ],
      "returns": {
        "arg": "response",
        "type": "object"
      },
      "http": {
        "verb": "post",
        "path": "/send-contact-form"
      }
    },
    "sendInvite": {
      "description": ["Invite a new user to join Aloes"],
      "accepts": [
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        },
        {
          "arg": "options",
          "type": "object"
        }
      ],
      "returns": {
        "arg": "success",
        "type": "boolean"
      },
      "http": {
        "verb": "post",
        "path": "/invite-studio"
      }
    },
    "verifyAddress": {
      "description": ["Call the address model"],
      "accepts": [
        {
          "arg": "address",
          "type": "object"
        }
      ],
      "returns": {
        "arg": "updatedAddress",
        "type": "object"
      },
      "http": {
        "verb": "post",
        "path": "/verify-address"
      }
    }
  }
}
